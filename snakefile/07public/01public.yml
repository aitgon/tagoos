


#GENOME_WINDOW_BED=os.getenv('GENOME_WINDOW_BED')
#CHROM=os.getenv('CHROM').split()
#ANNOTATION_BED=os.getenv('ANNOTATION_BED')
#SCORE_BED=os.getenv('SCORE_BED')

#CHROM_WINDOW=os.getenv('CHROM_WINDOW')

REGION=os.getenv('REGION')
OUTDIR = os.getenv('OUTDIR')
PREDICT_DIR=os.getenv('PREDICT_DIR')
TAGOOS=os.getenv('TAGOOS')
THREADS = int(os.getenv('THREADS'))

#rule all:
#    input:
#        hg19_bed_gz_tbi=expand(os.path.join(OUTDIR, "tagoos/tagoos_{region}_hg19.bed.gz.tbi"), region=[REGION]),
#        hg38_bed_gz_tbi=expand(os.path.join(OUTDIR, "tagoos/tagoos_{region}_hg38lifted.bed.gz.tbi"), region=[REGION]),

#rule bed_gz_index_hg38:
#    input:
#        bed_gz=os.path.join(OUTDIR, "tagoos/tagoos_{region}_hg38lifted.bed.gz"),
#    output:
#        bed_gz_tbi=os.path.join(OUTDIR, "tagoos/tagoos_{region}_hg38lifted.bed.gz.tbi"),
#    shell:
#        """ tabix -p bed {input.bed_gz}; """

#rule expand_bed_hg38:
#    input:
#        bed=expand(os.path.join(OUTDIR, "chrom/{chr}/annotation_score_pval_hg38lifted.bed"), chr=CHROM),
#    output:
#        bed_gz=os.path.join(OUTDIR, "tagoos/tagoos_{region}_hg38lifted.bed.gz"),
#    threads: THREADS
#    shell:
#        """sort -k1,1 -k2,2n --parallel {threads} {input.bed}  |bgzip -c > {output.bed_gz}"""

##rule d08_bed_gz_index:
##    input:
##        bed_gz=os.path.join(OUTDIR, "tagoos/{region}/hg19/chr{chr}.bed.gz"),
##    output:
##        bed_gz_tbi=os.path.join(OUTDIR, "tagoos/{region}/hg19/chr{chr}.bed.gz.tbi"),
##    threads: THREADS
##    shell:
##        """ tabix -p bed {input.bed_gz}; """

##rule tmp:
##    input:
##        bed_gz_tbi=os.path.join(OUTDIR, "tagoos/tagoos_{region}_hg19.bed.gz.tbi"),

rule all:
    input:
        hg38_bed_gz=os.path.join(OUTDIR, "files/tagoos_%s_hg38.bed.gz.tbi"%REGION),
        hg19_bed_gz=os.path.join(OUTDIR, "files/tagoos_%s_hg19.bed.gz.tbi"%REGION),

rule tabix_hg38:
    input:
        bed_gz=os.path.join(OUTDIR, "files/tagoos_%s_hg38.bed.gz"%REGION),
    output:
        bed_gz=os.path.join(OUTDIR, "files/tagoos_%s_hg38.bed.gz.tbi"%REGION),
    shell:
        """ tabix -p bed {input.bed_gz}; """

rule bgzip_hg38:
    input:
        bed=os.path.join(PREDICT_DIR, "prediction_pval_hg38.bed"),
    output:
        bed_gz=os.path.join(OUTDIR, "files/tagoos_%s_hg38.bed.gz"%REGION),
    threads: THREADS
    shell:
        """sort -k1,1 -k2,2n --parallel {threads} {input.bed}  |bgzip -c > {output.bed_gz}"""

rule liftover:
    input:
        bed=os.path.join(PREDICT_DIR, "prediction_pval.bed"),
        liftover=os.path.join(TAGOOS, "script/downloaded/liftOver"),
        chain_file=os.path.join(TAGOOS, "script/downloaded/hg19ToHg38.over.chain.gz"),
    output:
        bed=os.path.join(PREDICT_DIR, "prediction_pval_hg38.bed"),
    shell:
        """{input.liftover} {input.bed} {input.chain_file} {output.bed} unMapped -bedPlus=3"""

rule tabix_hg19:
    input:
        bed_gz=os.path.join(OUTDIR, "files/tagoos_%s_hg19.bed.gz"%REGION),
    output:
        bed_gz=os.path.join(OUTDIR, "files/tagoos_%s_hg19.bed.gz.tbi"%REGION),
    shell:
        """ tabix -p bed {input.bed_gz}; """

rule bgzip_hg19:
    input:
        bed=os.path.join(PREDICT_DIR, "prediction_pval.bed"),
    output:
        bed_gz=os.path.join(OUTDIR, "files/tagoos_%s_hg19.bed.gz"%REGION),
    threads: THREADS
    shell:
        """sort -k1,1 -k2,2n --parallel {threads} {input.bed}  |bgzip -c > {output.bed_gz}"""
        
