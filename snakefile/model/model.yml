ANNOTATION_BED=os.getenv('ANNOTATION_BED')
CHROM=sorted(os.getenv('CHROM').split())
HOME = os.getenv('HOME')
OUTDIR = os.getenv('OUTDIR')
OUTDIR_BASENAME = os.path.basename(OUTDIR)
PYTHONBIN = os.getenv('PYTHONBIN')
TAG_POS_DIR = os.getenv('TAG_POS_DIR')
THREADS = int(os.getenv('THREADS'))
TAG_NEG_DIR = os.getenv('TAG_NEG_DIR')
SCRIPT_DIR = os.path.join(os.getenv('TAGOOS'), "script")
#
from os.path import dirname
ANNOTATION_DIR = dirname(ANNOTATION_BED)

rule all:
    input:
        libsvm_pos_neg_count = os.path.join(OUTDIR, "libsvm_pos_neg_count.txt"),
        roc_plot = os.path.join(OUTDIR, "../%s_public/roc_plot.png"%OUTDIR_BASENAME),
        feature_importance_png = os.path.join(OUTDIR, "../%s_public/feature_importance.png"%OUTDIR_BASENAME),
        feature_importance_tsv = os.path.join(OUTDIR, "../%s_public/feature_importance.tsv"%OUTDIR_BASENAME),

rule precision_recall_plot:
    input:
        y_test_proba_tsv_list = expand(os.path.join(OUTDIR, "CV/{chr}/y_test_proba.tsv"), chr=CHROM),
        script = os.path.join(SCRIPT_DIR, "precision_recall_plot.py"),
    output:
        precision_recall_plot = os.path.join(OUTDIR, "precision_recall_plot.png"),
    shell:
        """{PYTHONBIN} {input.script} {input.y_test_proba_tsv_list} {output.precision_recall_plot}"""

rule roc_plot:
    input:
        y_test_proba_tsv_list = expand(os.path.join(OUTDIR, "CV/{chr}/y_test_proba.tsv"), chr=CHROM),
        script = os.path.join(SCRIPT_DIR, "roc_plot.py"),
    output:
        roc_plot = os.path.join(OUTDIR, "../%s_public/roc_plot.png"%OUTDIR_BASENAME),
    shell:
        """{PYTHONBIN} {input.script} {input.y_test_proba_tsv_list} {output.roc_plot}"""

rule y_test_proba:
    input:
        test_libsvm = os.path.join(OUTDIR, "CV/{chr}/test.libsvm"),
        train_libsvm = os.path.join(OUTDIR, "CV/{chr}/train.libsvm"),
        test_instance = os.path.join(OUTDIR, "CV/{chr}/test_instance.txt"),
        script = os.path.join(SCRIPT_DIR, "y_test_proba.py"),
    output:
        y_test_proba_tsv = os.path.join(OUTDIR, "CV/{chr}/y_test_proba.tsv"),
    shell:
        """{PYTHONBIN} {input.script} {input.test_libsvm} {input.test_instance} {input.train_libsvm} {output.y_test_proba_tsv}"""

rule cv_libsvm:
    input:
        rsid_chrom_libsvm = os.path.join(OUTDIR, "CV/rsid_chrom.libsvm"),
    output:
        test_libsvm = os.path.join(OUTDIR, "CV/{chr}/test.libsvm"),
        train_libsvm = os.path.join(OUTDIR, "CV/{chr}/train.libsvm"),
        test_instance = os.path.join(OUTDIR, "CV/{chr}/test_instance.txt"),
        train_instance = os.path.join(OUTDIR, "CV/{chr}/train_instance.txt"),
    params:
        chr = "chr{chr}"
    shell:
        """awk -F "\t" '{{if($2=="{params.chr}"){{ print $1 >"{output.test_instance}"; print $3 >"{output.test_libsvm}" }} else {{print $1>"{output.train_instance}"; print $3 >"{output.train_libsvm}" }} }}' {input.rsid_chrom_libsvm}"""

rule rsid_chrom_libsvm:
    input:
        libsvm = os.path.join(OUTDIR, "annotation.libsvm"),
        rsid2chrom = os.path.join(OUTDIR, "rsid2chrom.tsv"),
    output:
        rsid_chrom_libsvm = os.path.join(OUTDIR, "CV/rsid_chrom.libsvm"),
    shell:
        """LC_ALL=C paste -d "\t" {input.rsid2chrom} {input.libsvm} > {output.rsid_chrom_libsvm}"""

rule rsid2chrom:
    input:
        instance = os.path.join(OUTDIR, "instance.txt"),
    output:
        rsid2chrom = os.path.join(OUTDIR, "rsid2chrom.tsv"),
    shell:
        """{HOME}/data/2015_svmgwas/data/hcomp/get_record {HOME}/data/2015_svmgwas/data/variant/1000genomes/eur/eur.peak.bed.idx {HOME}/data/2015_svmgwas/data/variant/1000genomes/eur/eur.peak.bed -f {input.instance} |awk '{{print $4"\t"$1}}'>{output.rsid2chrom}"""

rule create_model:
    input:
        libsvm = os.path.join(OUTDIR, "annotation.libsvm"),
        variable_txt = os.path.join(ANNOTATION_DIR, "variable.txt"),
        script = os.path.join(SCRIPT_DIR, "create_model.py")
    output:
        model_pkl = os.path.join(OUTDIR, "model.pkl"),
        feature_importance_tsv = os.path.join(OUTDIR, "../%s_public/feature_importance.tsv"%OUTDIR_BASENAME),
        feature_importance_png = os.path.join(OUTDIR, "../%s_public/feature_importance.png"%OUTDIR_BASENAME),
    shell:
        """{PYTHONBIN} {input.script} {input.libsvm} {input.variable_txt} {output.model_pkl} {output.feature_importance_tsv}  {output.feature_importance_png}"""

rule libsvm_pos_neg_count:
    input:
        libsvm = os.path.join(OUTDIR, "annotation.libsvm"),
    output:
        libsvm_pos_neg_count = os.path.join(OUTDIR, "libsvm_pos_neg_count.txt"),
    shell:
        """LC_ALL=C grep -P "^1 " {input.libsvm} |wc -l >{output.libsvm_pos_neg_count};
            LC_ALL=C grep -P "^-1 " {input.libsvm} |wc -l >>{output.libsvm_pos_neg_count};"""

rule merge_libsvm:
    input:
        instance_txt_pos = expand(os.path.join(TAG_POS_DIR, "chrom/{chr}/instance.txt"), chr=CHROM),
        annotation_libsvm_pos = expand(os.path.join(TAG_POS_DIR, "chrom/{chr}/annotation.libsvm"), chr=CHROM),
        instance_txt_neg = expand(os.path.join(OUTDIR, "chrom/{chr}/instance.txt"), chr=CHROM),
        annotation_libsvm_neg = expand(os.path.join(OUTDIR, "chrom/{chr}/annotation.libsvm"), chr=CHROM),
    output:
        libsvm = os.path.join(OUTDIR, "annotation.libsvm"),
        instance = os.path.join(OUTDIR, "instance.txt"),
    shell:
        """cat {input.instance_txt_pos} {input.instance_txt_neg} >{output.instance};
            cat {input.annotation_libsvm_pos} {input.annotation_libsvm_neg} >{output.libsvm};"""

rule tmp:
    input:
        annotation_libsvm = os.path.join(OUTDIR, "chrom/20/annotation.libsvm"),

rule grep_pasted_instance_libsvm_neg:
    input: 
        instance_pos = os.path.join(TAG_POS_DIR, "chrom/{chr}/instance.txt"),
        pasted_instance_libsvm = os.path.join(TAG_NEG_DIR, "chrom/{chr}/pasted_instance.libsvm"),
    output:
        instance_txt = os.path.join(OUTDIR, "chrom/{chr}/instance.txt"),
        annotation_libsvm = os.path.join(OUTDIR, "chrom/{chr}/annotation.libsvm"),
    shell:
        """LC_ALL=C grep -v -w -F -f {input.instance_pos} {input.pasted_instance_libsvm} |awk -F "\t" '{{ print $1 >"{output.instance_txt}"; print $2 >"{output.annotation_libsvm}" }}'"""

rule pasted_instance_libsvm:
    input: 
        libsvm = os.path.join(TAG_NEG_DIR, "chrom/{chr}/annotation.libsvm"),
        instance = os.path.join(TAG_NEG_DIR, "chrom/{chr}/instance.txt"),
    output:
        pasted_instance_libsvm = os.path.join(TAG_NEG_DIR, "chrom/{chr}/pasted_instance.libsvm"),
    shell:
        """LC_ALL=C paste {input.instance} {input.libsvm} > {output.pasted_instance_libsvm}"""

