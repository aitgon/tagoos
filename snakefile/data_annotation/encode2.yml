ANNOTATION_DATA=os.getenv('ANNOTATION_DATA')
ENCODE2_EXPERIMENT_LIST=os.getenv('ENCODE2_EXPERIMENT_LIST')
ENCODE2_DATA_DIR = os.getenv('ENCODE2_DATA_DIR')
HOME = os.getenv('HOME')
SCRIPTDIR = os.path.join(os.getenv('TAGOOS'), "script")
THREADS = int(os.getenv('THREADS'))

rule proc1:
    input:
        bed=os.path.join(ENCODE2_DATA_DIR, "proc1.bed"),
    output:
        bed=os.path.join(ENCODE2_DATA_DIR, "encode2.bed"),
    shell:
        """cat {input.bed} |awk 'NF==4{{print}}{{}}' >{output.bed}"""

#"""df qsfqqs qfssfq sdf qscat {input.bed} |tr -d '\r' |awk 'NF==4{{print}}{{}}' >{output.bed};"""

rule join_bed_annotation:
    input:
        bed=os.path.join(ENCODE2_DATA_DIR, "encode2_id_sortedk4.bed"),
        proc2=os.path.join(ENCODE2_DATA_DIR, "proc2.tsv"),
    output:
        bed=os.path.join(ENCODE2_DATA_DIR, "proc1.bed"),
    shell:
        """join -1 4 -2 2 {input.bed} {input.proc2} |awk 'BEGIN{{OFS="\t"}}{{print $2,$3,$4,$8"."$7"."$6}}' >{output.bed}"""

rule merge_id_bed:
    input:
        touched=os.path.join(ENCODE2_DATA_DIR, "gunzipped"),
    output:
        bed_sortedk4=os.path.join(ENCODE2_DATA_DIR, "encode2_id_sortedk4.bed"),
    params:
        bed_dir=os.path.join(ENCODE2_DATA_DIR, "bed"),
    threads: THREADS
    shell:
        """sort -k4,4 --parallel {threads} {params.bed_dir}/* >{output.bed_sortedk4}"""

#rule id_bed_GRCh38:
#    input:
#        bed_gz_downloaded=os.path.join(ENCODE2_DATA_DIR, "bed_gz.GRCh38.downloaded"),
#    output:
#        id_bed=os.path.join(ENCODE2_DATA_DIR, "encode2_id_GRCh38.bed"),
#    params:
#        bed_gz_dir=os.path.join(ENCODE2_DATA_DIR, "bed_gz", "GRCh38")
#    shell:
#        """ls {params.bed_gz_dir} |while read F; do export FN=$F; export ID="${{FN%.bed.gz}}"; gunzip -c {params.bed_gz_dir}/$FN |awk -v ID="${{ID}}" 'BEGIN{{OFS="\t"}}{{print $1,$2,$3,ID}}'; done >{output.id_bed}"""

#rule bed_hg19toGRCh38:
#    input:
#        hg19ToHg38_chain="/cobelix/gonzalez/Software/repositories/tagoos/data/hg19ToHg38.over.chain.gz"
#    output:
#        bed=os.path.join(ENCODE2_DATA_DIR, "encode2_id_hg19toGRCh38.bed"),
#        touched=os.path.join(ENCODE2_DATA_DIR, "hg19toGRCh38.converted"),
#    params:
#        bed_dir=os.path.join(ENCODE2_DATA_DIR, "bed", "hg19"),
#        bed_dir_hg19toGRCh38=os.path.join(ENCODE2_DATA_DIR, "bed", "hg19toGRCh38"),
#    threads: THREADS
#    shell:
#        """mkdir -p {params.bed_dir_hg19toGRCh38};
#        ls {params.bed_dir} |xargs -n1 -P{threads} -I% sh -c "/cobelix/gonzalez/Software/miniconda3/envs/tagoos_py27/bin/python /cobelix/gonzalez/Software/miniconda3/envs/tagoos_py27/bin/CrossMap.py bed {input.hg19ToHg38_chain} {params.bed_dir}/% {params.bed_dir_hg19toGRCh38}/%";
#        touch {output.touched};"""

rule gunzip_bed:
    input:
        bed_gz_downloaded=os.path.join(ENCODE2_DATA_DIR, "bed_gz.downloaded"),
    output:
        touched=os.path.join(ENCODE2_DATA_DIR, "gunzipped"),
    params:
        bed_gz_dir=os.path.join(ENCODE2_DATA_DIR, "bed_gz"),
        bed_dir=os.path.join(ENCODE2_DATA_DIR, "bed"),
    shell:
        """mkdir -p {params.bed_dir}; ls {params.bed_gz_dir} |while read F; do export FN=$F; export ID="${{FN%.bed.gz}}"; gunzip -c {params.bed_gz_dir}/$FN |awk -v ID="${{ID}}" 'BEGIN{{OFS="\t"}}{{print $1,$2,$3,ID}}' >{params.bed_dir}/"$F".bed; done;
        touch {output.touched};"""

#rule download_bed_gz_GRCh38:
#    input:
#        experiment2file_tsv=os.path.join(ENCODE2_DATA_DIR, "experiment2file.tsv"),
#    output:
#        bed_gz_downloaded=os.path.join(ENCODE2_DATA_DIR, "bed_gz.GRCh38.downloaded"),
#    params: encode2_bed_data_dir=os.path.join(ENCODE2_DATA_DIR, "bed_gz", "GRCh38")
#    threads: THREADS
#    shell:
#        """mkdir -p {params.encode2_bed_data_dir}; grep -v -w revoked {input.experiment2file_tsv} |grep -w GRCh38 |cut -f1,2 |awk 'NR>1{{print $0}}' |xargs -n2 -P{threads} sh -c 'wget "https://www.encodeproject.org$1" -O {params.encode2_bed_data_dir}/"$0".bed.gz';
#            touch {output.bed_gz_downloaded}"""

rule download_bed_gz:
    input:
        experiment2file_tsv=os.path.join(ENCODE2_DATA_DIR, "experiment2file.tsv"),
    output:
        bed_gz_downloaded=os.path.join(ENCODE2_DATA_DIR, "bed_gz.hg19.downloaded"),
    params: encode2_bed_data_dir=os.path.join(ENCODE2_DATA_DIR, "bed_gz")
    threads: THREADS
    shell:
        """mkdir -p {params.encode2_bed_data_dir}; grep -v -w revoked {input.experiment2file_tsv} |grep -w hg19 |cut -f1,2 |awk 'NR>1{{print $0}}' |xargs -n2 -P{threads} sh -c 'wget -nc "https://www.encodeproject.org$1" -O {params.encode2_bed_data_dir}/"$0".bed.gz';
            touch {output.bed_gz_downloaded}"""

rule create_experiment2file:
    input:
        json_downloaded=os.path.join(ENCODE2_DATA_DIR, "json.downloaded"),
        script = os.path.join(SCRIPTDIR, "annotation/process_encode2_experiment_json.py"),
    output:
        experiment2file_tsv=os.path.join(ENCODE2_DATA_DIR, "experiment2file.tsv"),
    params:
        experiment_json_dir=os.path.join(ENCODE2_DATA_DIR, "json")
    shell:
        """{HOME}/Software/miniconda3/envs/tagoos/bin/python {input.script} {params.experiment_json_dir} {output.experiment2file_tsv}; """

rule download_experiment_json:
    input:
        annotation_data_sortedk3=os.path.join(ENCODE2_DATA_DIR, "proc2.tsv"),
    params: encode_json_data_dir=os.path.join(ENCODE2_DATA_DIR, "json")
    threads: THREADS
    output:
        json_downloaded=os.path.join(ENCODE2_DATA_DIR, "json.downloaded"),
    shell:
        """mkdir -p {params.encode_json_data_dir}; cat {input.annotation_data_sortedk3} |cut -f2 | xargs -n1 -P{threads} -I@ sh -c "wget -nc 'https://www.encodeproject.org/search/?type=file&dataset=/experiments/@/&format=json&frame=object&limit=all' -O {params.encode_json_data_dir}/@.json || true"; touch {output.json_downloaded}"""

rule grep_sort_experiment_list:
    input:
        experiment_list=ENCODE2_EXPERIMENT_LIST
    output:
        proc1=os.path.join(ENCODE2_DATA_DIR, "proc1.tsv"),
        proc2=os.path.join(ENCODE2_DATA_DIR, "proc2.tsv"),
    shell:
        """awk 'BEGIN{{FS="\t";OFS="\t"}}{{if($5!="") {{ print "https://www.encodeproject.org/search/?type=file&dataset="$1"&format=json&frame=object&limit=all",$2,"encode2",tolower($7),tolower($5) }} else {{ print "https://www.encodeproject.org/search/?type=file&dataset="$1"&format=json&frame=object&limit=all",$2,"encode2",tolower($7),tolower($4) }} }}' {input.experiment_list} >{output.proc1};
            cat {output.proc1} |tr -d " " |sed 's/-//g' |sed 's/(/_/g' |sed 's/)/_/g' |sed 's/,/_/g' |sort -k2,2 >{output.proc2}"""

