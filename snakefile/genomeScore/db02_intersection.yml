OUTDIR = os.getenv('OUTDIR')
THREADS = int(os.getenv('THREADS'))

GENOME_WINDOW_BED=os.getenv('GENOME_WINDOW_BED')
CHROM=os.getenv('CHROM').split()
ANNOTATION_BED=os.getenv('ANNOTATION_BED')
SCORE_BED=os.getenv('SCORE_BED')
GENE_BED=os.getenv('GENE_BED')
DBSNP_BED=os.getenv('DBSNP_BED')

CHROM_WINDOW=os.getenv('CHROM_WINDOW')

REGION=os.getenv('REGION')

TAGOOS=os.getenv('TAGOOS')

rule all:
    input:
        expand(os.path.join(OUTDIR, "tagoos/{region}/hg19/chr{chr}.bed.gz.tbi"), chr=CHROM, region=[REGION]),
        expand(os.path.join(OUTDIR, "tagoos/{region}/hg38/chr{chr}.bed.gz.tbi"), chr=CHROM, region=[REGION]),

rule d08_bed_gz_hg38_index:
    input:
        bed_gz=os.path.join(OUTDIR, "tagoos/{region}/hg38/chr{chr}.bed.gz"),
    output:
        bed_gz_tbi=os.path.join(OUTDIR, "tagoos/{region}/hg38/chr{chr}.bed.gz.tbi"),
    threads: THREADS
    shell:
        """ tabix -p bed {input.bed_gz}; """

rule d07_hg38_sort_bgzip:
    input:
        bed=os.path.join(OUTDIR, "chrom/{chr}/annotation_score_pval_hg38.bed"),
    output:
        bed_gz=os.path.join(OUTDIR, "tagoos/{region}/hg38/chr{chr}.bed.gz"),
    threads: THREADS
    shell:
        """sort -k1,1 -k2,2n --parallel {threads} {input.bed}  |bgzip -c > {output.bed_gz}"""

rule d10_hg38_2:
    input:
        bed=os.path.join(OUTDIR, "chrom/{chr}/annotation_score_pval_nonsorted.bed"),
        liftover=os.path.join(TAGOOS, "script/downloaded/liftOver"),
        chain_file=os.path.join(TAGOOS, "script/downloaded/hg19ToHg38.over.chain.gz"),
    output:
        bed=os.path.join(OUTDIR, "chrom/{chr}/annotation_score_pval_hg38.bed"),
    shell:
        """{input.liftover} {input.bed} {input.chain_file} {output.bed} unMapped -bedPlus=3"""

rule d08_bed_gz_index:
    input:
        bed_gz=os.path.join(OUTDIR, "tagoos/{region}/hg19/chr{chr}.bed.gz"),
    output:
        bed_gz_tbi=os.path.join(OUTDIR, "tagoos/{region}/hg19/chr{chr}.bed.gz.tbi"),
    threads: THREADS
    shell:
        """ tabix -p bed {input.bed_gz}; """

rule d07_sort_bgzip:
    input:
        bed=os.path.join(OUTDIR, "chrom/{chr}/annotation_score_pval_nonsorted.bed"),
    output:
        bed_gz=os.path.join(OUTDIR, "tagoos/{region}/hg19/chr{chr}.bed.gz"),
    threads: THREADS
    shell:
        """sort -k1,1 -k2,2n --parallel {threads} {input.bed}  |bgzip -c > {output.bed_gz}"""

rule d06_join_annotation_score:
    input:
        bed=os.path.join(OUTDIR, "chrom/{chr}/annotation.bed"),
        bed2=os.path.join(OUTDIR, "chrom/{chr}/score_pval.bed"),
    output:
        bed=os.path.join(OUTDIR, "chrom/{chr}/annotation_score_pval_nonsorted.bed"),
    shell:
        """intersectBed -sorted -a {input.bed} -b {input.bed2} -wb |cut -f1,2,3,4,5,10,11 >{output.bed}"""

rule d05_s_score:
    input:
        bed=os.path.join(OUTDIR, "chrom/{chr}/score_pval_nonsorted.bed"),
    output:
        bed=os.path.join(OUTDIR, "chrom/{chr}/score_pval.bed"),
    threads: THREADS
    shell:
        """sort --parallel {threads} -u -k1,1 -k2,2n {input.bed} -o {output.bed}"""

rule d04_score:
    input:
        bed=os.path.join(OUTDIR, "chrom/{chr}/chrom.bed"),
        score_bed = SCORE_BED,
    output:
        bed=os.path.join(OUTDIR, "chrom/{chr}/score_pval_nonsorted.bed"),
    shell:
        """intersectBed -sorted -a {input.score_bed} -b {input.bed} |grep -v gwindow |awk '{{print $1"\t"$2"\t"$3"\t"$1":"$2+1"-"$3"\t"$4"\t"$5}}' > {output.bed}"""

rule d03_s_annotation:
    input:
        bed=os.path.join(OUTDIR, "chrom/{chr}/annotation_nonsorted.bed"),
    output:
        bed=os.path.join(OUTDIR, "chrom/{chr}/annotation.bed"),
    threads: THREADS
    shell:
        """sort --parallel {threads} -u -k1,1 -k2,2n {input.bed} -o {output.bed}"""

rule d02_annotation:
    input:
        bed=os.path.join(OUTDIR, "chrom/{chr}/chrom.bed"),
        annotation_bed = ANNOTATION_BED,
    output:
        bed=os.path.join(OUTDIR, "chrom/{chr}/annotation_nonsorted.bed"),
    shell:
        """intersectBed -sorted -a {input.annotation_bed} -b {input.bed} |awk '{{print $1"\t"$2"\t"$3"\t"$1":"$2+1"-"$3"\t"$4}}' > {output.bed}"""

rule d01_grep_genome_splitted:
    input:
        gwindow_bed=GENOME_WINDOW_BED
    output:
        gwindow_bed=os.path.join(OUTDIR, "chrom/{chr}/chrom.bed")
    params: chr="chr{chr}"
    shell:
        """grep -P '^{params.chr}\t' {input.gwindow_bed} >{output.gwindow_bed}"""

