OUTDIR = os.getenv('OUTDIR')
HOME = os.getenv('HOME')
TAGOOS = os.getenv('TAGOOS')
REGION = os.getenv('REGION')
THREADS = int(os.getenv('THREADS'))
VARIABLE_TXT = os.getenv('VARIABLE_TXT')
MODEL_PKL = os.getenv('MODEL_PKL')
GENOME_WINDOW_IDS=os.getenv('GENOME_WINDOW_IDS').split()
ANNOTATION_BED = os.getenv('ANNOTATION_BED')

rule gsa99_all:
    input:
        os.path.join(OUTDIR, "score_pval_neglogpval.bg"),
        os.path.join(OUTDIR, "annotation.bed"),

rule gsa09_annotation_bed:
    input:
        bed = expand(os.path.join(OUTDIR, "gwindow/{gwindow}/gwindow_annotation_collapsed2.bed"), gwindow=GENOME_WINDOW_IDS),
    output:
        bed = os.path.join(OUTDIR, "annotation.bed")
    threads: THREADS
    params: region=REGION
    shell:
        """sort --parallel {threads} -k1,1 -k2,2n {input.bed} >> {output.bed}"""

rule gsa08_cat_score_pval_neglogpval:
    input:
        bg = expand(os.path.join(OUTDIR, "gwindow/{gwindow}/score_pval_neglogpval.bg"), gwindow=GENOME_WINDOW_IDS)
    output:
        bg = os.path.join(OUTDIR, "score_pval_neglogpval.bg"),
    threads: THREADS
    shell:
        """sort --parallel {threads} -k1,1 -k2,2n {input.bg} |tr -d ' ' > {output.bg};"""

rule gsa07_score_pval_neglogpval:
    input:
        tsv=os.path.join(OUTDIR, "gwindow/{gwindow}/score.tsv"),
        rda = os.path.join(OUTDIR, "random/ecdf.rda"),
    output:
        bg = os.path.join(OUTDIR, "gwindow/{gwindow}/score_pval_neglogpval.bg")
    shell:
        """Rscript -e 'library("data.table"); library(stringr); dt=fread("{input.tsv}", col.names=c("gwindow", "score")); dt = cbind(dt, str_split_fixed(dt$gwindow, "[:]", 2)); dt[,gwindow:=NULL]; dt = cbind(dt, str_split_fixed(dt$V2, "[-]", 2)); dt <- dt[, -c(3), with =F]; dt <- dt[, c(2,3,4,1), with =F]; colnames(dt) = c("chrom", "start", "end", "score"); F10=get(load("{input.rda}")); dt$pval=1-F10(dt$score); dt$neglogpval=-log10(dt$pval); dt$start = as.numeric(dt$start)-1; dt=dt[order(chrom, start)]; dt$start = format(dt$start, scientific=F); dt$end = format(dt$end, scientific=F); dt$pval = format(dt$pval, scientific=F); dt$neglogpval = format(dt$neglogpval, scientific=F); write.table(dt, file="{output.bg}", sep="\\t", row.names=F, col.names=F, quote=F)';"""

rule gsa06_score:
    input:
        script=os.path.join(TAGOOS, "script/score2.py"),
        libsvm=os.path.join(OUTDIR, "gwindow/{gwindow}/collapsed2.libsvm"),
        instance=os.path.join(OUTDIR, "gwindow/{gwindow}/instance.txt"),
        model_pkl=MODEL_PKL,
    output:
        tsv=os.path.join(OUTDIR, "gwindow/{gwindow}/score.tsv"),
    shell:
        """{HOME}/Software/miniconda3/envs/tagoos/bin/python {input.script} {input.libsvm} {input.instance} {input.model_pkl} {output.tsv}"""

rule gsa05_tolibsvm:
    input:
        script=os.path.join(TAGOOS, "script/collapse2libsvm.py"),
        bed=os.path.join(OUTDIR, "gwindow/{gwindow}/gwindow_annotation_collapsed2.bed"),
        variable_txt=VARIABLE_TXT,
    output:
        libsvm=os.path.join(OUTDIR, "gwindow/{gwindow}/collapsed2.libsvm"),
        instance=os.path.join(OUTDIR, "gwindow/{gwindow}/instance.txt"),
    shell:
        """python3 {input.script} {input.bed} {input.variable_txt} {output.instance} {output.libsvm}"""

rule gsa04_collapse_peaks:
    input:
        script=os.path.join(TAGOOS, "script/collapseSmallToLargePeaks_byCol4.py"),
        bed=os.path.join(OUTDIR, "gwindow/{gwindow}/gwindow_annotation_collapsed.bed"),
    output:
        bed=os.path.join(OUTDIR, "gwindow/{gwindow}/gwindow_annotation_collapsed2.bed"),
    shell:
        """{HOME}/Software/miniconda3/envs/tagoos/bin/python {input.script} {input.bed} {output.bed}"""

rule gsa03_collapse_annotations:
    input:
        script=os.path.join(TAGOOS, "script/groupby123cols_collapse4col.py"),
        bed=os.path.join(OUTDIR, "gwindow/{gwindow}/gwindow_1nt_region_annotation.bed"),
    output:
        bed=os.path.join(OUTDIR, "gwindow/{gwindow}/gwindow_annotation_collapsed.bed"),
    shell:
        """{HOME}/Software/miniconda3/envs/tagoos/bin/python {input.script} {input.bed} {output.bed}"""

rule gsa02_sort_annotated_1nt:
    input:
        bed=os.path.join(OUTDIR, "gwindow/{gwindow}/gwindow_1nt_region_annotation_nonsorted.bed"),
    output:
        bed=os.path.join(OUTDIR, "gwindow/{gwindow}/gwindow_1nt_region_annotation.bed"),
    threads: THREADS
    shell:
        """sort --parallel {threads} -k1,1 -k2,2n -k3,3n -k4,4 -u {input.bed} -o {output.bed}"""

rule gsa01_annotation_1nt:
    """This rule crosses the annotation bed of the model with the genome windows in the region

    Parameters
    ----------
    annotation : Bed file path
        Bed file path to the model annotation
    os.path.join(OUTDIR, "{gwindow}/gwindow.bed") : str
        The specified region in the given genome window
        $ head /cobelix/gonzalez/data/2015_svmgwas/repositories/tagoos-appli/170712/out/GRASP108intergenic/1kg1000000intergenic_mergedannot_index3_analysis/genome_score/chr1:1-30000000/gwindow_region.bed
        chr1    0       11868
        chr1    29370   30365
        chr1    30503   34610
        chr1    36081   69090
    """
    input:
        annotation=ANNOTATION_BED,
        bed=os.path.join(OUTDIR, "gwindow/{gwindow}/gwindow_1nt_region.bed"),
    output:
        bed=os.path.join(OUTDIR, "gwindow/{gwindow}/gwindow_1nt_region_annotation_nonsorted.bed"),
    shell:
        """intersectBed -sorted -a {input.bed} -b  {input.annotation} -wb | awk '{{print $1"\t"$2"\t"$3"\t"$7}}' |uniq >{output.bed};
            intersectBed -sorted -a {input.bed} -b  {input.annotation} -v | awk '{{print $1"\t"$2"\t"$3"\t."}}' |uniq >>{output.bed}"""


