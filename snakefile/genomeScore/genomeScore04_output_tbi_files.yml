OUTDIR = os.getenv('OUTDIR')
THREADS = int(os.getenv('THREADS'))

GENOME_WINDOW_BED=os.getenv('GENOME_WINDOW_BED')
CHROM=os.getenv('CHROM').split()
ANNOTATION_BED=os.getenv('ANNOTATION_BED')
SCORE_BED=os.getenv('SCORE_BED')

CHROM_WINDOW=os.getenv('CHROM_WINDOW')

REGION=os.getenv('REGION')

TAGOOS=os.getenv('TAGOOS')

rule all:
    input:
        hg19_bed_gz_tbi=expand(os.path.join(OUTDIR, "tagoos/tagoos_{region}_hg19.bed.gz.tbi"), region=[REGION]),
        hg38_bed_gz_tbi=expand(os.path.join(OUTDIR, "tagoos/tagoos_{region}_hg38lifted.bed.gz.tbi"), region=[REGION]),

rule bed_gz_index_hg38:
    input:
        bed_gz=os.path.join(OUTDIR, "tagoos/tagoos_{region}_hg38lifted.bed.gz"),
    output:
        bed_gz_tbi=os.path.join(OUTDIR, "tagoos/tagoos_{region}_hg38lifted.bed.gz.tbi"),
    shell:
        """ tabix -p bed {input.bed_gz}; """

rule expand_bed_hg38:
    input:
        bed=expand(os.path.join(OUTDIR, "chrom/{chr}/annotation_score_pval_hg38lifted.bed"), chr=CHROM),
    output:
        bed_gz=os.path.join(OUTDIR, "tagoos/tagoos_{region}_hg38lifted.bed.gz"),
    threads: THREADS
    shell:
        """sort -k1,1 -k2,2n --parallel {threads} {input.bed}  |bgzip -c > {output.bed_gz}"""

rule liftover:
    input:
        bed=os.path.join(OUTDIR, "chrom/{chr}/annotation_score_pval_nonsorted.bed"),
        liftover=os.path.join(TAGOOS, "script/downloaded/liftOver"),
        chain_file=os.path.join(TAGOOS, "script/downloaded/hg19ToHg38.over.chain.gz"),
    output:
        bed=os.path.join(OUTDIR, "chrom/{chr}/annotation_score_pval_hg38lifted.bed"),
    shell:
        """{input.liftover} {input.bed} {input.chain_file} {output.bed} unMapped -bedPlus=3"""

#rule d08_bed_gz_index:
#    input:
#        bed_gz=os.path.join(OUTDIR, "tagoos/{region}/hg19/chr{chr}.bed.gz"),
#    output:
#        bed_gz_tbi=os.path.join(OUTDIR, "tagoos/{region}/hg19/chr{chr}.bed.gz.tbi"),
#    threads: THREADS
#    shell:
#        """ tabix -p bed {input.bed_gz}; """

#rule tmp:
#    input:
#        bed_gz_tbi=os.path.join(OUTDIR, "tagoos/tagoos_{region}_hg19.bed.gz.tbi"),

rule bed_gz_index:
    input:
        bed_gz=os.path.join(OUTDIR, "tagoos/tagoos_{region}_hg19.bed.gz"),
    output:
        bed_gz_tbi=os.path.join(OUTDIR, "tagoos/tagoos_{region}_hg19.bed.gz.tbi"),
    shell:
        """ tabix -p bed {input.bed_gz}; """

rule expand_bed:
    input:
        bed=expand(os.path.join(OUTDIR, "chrom/{chr}/annotation_score_pval_nonsorted.bed"), chr=CHROM),
    output:
        bed_gz=os.path.join(OUTDIR, "tagoos/tagoos_{region}_hg19.bed.gz"),
    threads: THREADS
    shell:
        """sort -k1,1 -k2,2n --parallel {threads} {input.bed}  |bgzip -c > {output.bed_gz}"""

rule d07_sort_bgzip:
    input:
        bed=os.path.join(OUTDIR, "chrom/{chr}/annotation_score_pval_nonsorted.bed"),
    output:
        bed_gz=os.path.join(OUTDIR, "tagoos/{region}/hg19/chr{chr}.bed.gz"),
    threads: THREADS
    shell:
        """sort -k1,1 -k2,2n --parallel {threads} {input.bed}  |bgzip -c > {output.bed_gz}"""

rule d06_join_annotation_score:
    input:
        bed=os.path.join(OUTDIR, "chrom/{chr}/annotation.bed"),
        bed2=os.path.join(OUTDIR, "chrom/{chr}/score_pval.bed"),
    output:
        bed=os.path.join(OUTDIR, "chrom/{chr}/annotation_score_pval_nonsorted.bed"),
    shell:
        """intersectBed -sorted -a {input.bed} -b {input.bed2} -wb |cut -f1,2,3,5,9,10 >{output.bed}"""

rule d05_s_score:
    input:
        bed=os.path.join(OUTDIR, "chrom/{chr}/score_pval_nonsorted.bed"),
    output:
        bed=os.path.join(OUTDIR, "chrom/{chr}/score_pval.bed"),
    threads: THREADS
    shell:
        """sort --parallel {threads} -u -k1,1 -k2,2n {input.bed} -o {output.bed}"""

rule d04_score:
    input:
        bed=os.path.join(OUTDIR, "chrom/{chr}/chrom.bed"),
        score_bed = SCORE_BED,
    output:
        bed=os.path.join(OUTDIR, "chrom/{chr}/score_pval_nonsorted.bed"),
    shell:
        """intersectBed -sorted -a {input.score_bed} -b {input.bed} |grep -v gwindow |awk '{{print $1"\t"$2"\t"$3"\t"$4"\t"$5}}' > {output.bed}"""

rule d03_s_annotation:
    input:
        bed=os.path.join(OUTDIR, "chrom/{chr}/annotation_nonsorted.bed"),
    output:
        bed=os.path.join(OUTDIR, "chrom/{chr}/annotation.bed"),
    threads: THREADS
    shell:
        """sort --parallel {threads} -u -k1,1 -k2,2n {input.bed} -o {output.bed}"""

rule d02_annotation:
    input:
        bed=os.path.join(OUTDIR, "chrom/{chr}/chrom.bed"),
        annotation_bed = ANNOTATION_BED,
    output:
        bed=os.path.join(OUTDIR, "chrom/{chr}/annotation_nonsorted.bed"),
    shell:
        """intersectBed -sorted -a {input.annotation_bed} -b {input.bed} |awk '{{print $1"\t"$2"\t"$3"\t"$1":"$2+1"-"$3"\t"$4}}' > {output.bed}"""

rule d01_grep_genome_splitted:
    input:
        gwindow_bed=GENOME_WINDOW_BED
    output:
        gwindow_bed=os.path.join(OUTDIR, "chrom/{chr}/chrom.bed")
    params: chr="chr{chr}"
    shell:
        """grep -P '^{params.chr}\t' {input.gwindow_bed} >{output.gwindow_bed}"""

