ANNOT_LABEL = os.getenv('ANNOT_LABEL')
ANNOTATION_BED = os.getenv('ANNOTATION_BED')
CHROM=os.getenv('CHROM').split()
GENOME1K_DATA_DIR = os.getenv('GENOME1K_DATA_DIR')
HOME = os.getenv('HOME')
OUTDIR = os.getenv('OUTDIR')
SCRIPTDIR = os.getenv('SCRIPTDIR')
SIGN = os.getenv('SIGN')
TAG_RSID_NEG = os.getenv('TAG_RSID_NEG')
TAG_RSID_POS = os.getenv('TAG_RSID_POS')
TAG_SIGN=[[os.getenv('TAG_RSID'), os.getenv('SIGN')]]

SIGN = ['pos', 'neg']
from os.path import basename
ANNOTATION_BED_FN = basename(ANNOTATION_BED)

rule all:
    input:
        roc_plot = os.path.join(OUTDIR, "roc_plot.png"),
        precision_recall_plot = os.path.join(OUTDIR, "precision_recall_plot.png"),
        model_pkl = os.path.join(OUTDIR, "model.pkl"),
        heatmap_png = os.path.join(OUTDIR, "heatmap.png"),

rule precision_recall_plot:
    input:
        cv_proba_pkl = os.path.join(OUTDIR, "cv_proba_path.pkl"),
        script = os.path.join(SCRIPTDIR, "precision_recall_plot.py"),
    output:
        precision_recall_plot = os.path.join(OUTDIR, "precision_recall_plot.png"),
    shell:
        """%s/Software/miniconda3/envs/svmgwasappli3/bin/python {input.script} {input.cv_proba_pkl} {output.precision_recall_plot}"""%HOME

rule roc_plot:
    input:
        cv_proba_pkl = os.path.join(OUTDIR, "cv_proba_path.pkl"),
        script = os.path.join(SCRIPTDIR, "roc_plot.py")
    output:
        roc_plot = os.path.join(OUTDIR, "roc_plot.png"),
    shell:
        """%s/Software/miniconda3/envs/svmgwasappli3/bin/python {input.script} {input.cv_proba_pkl} {output.roc_plot}"""%HOME

rule cv_y_probas:
    input:
        libsvm = os.path.join(OUTDIR, "annotation.libsvm"),
        rsid2chrom = os.path.join(OUTDIR, "rsid2chrom.tsv"),
        script = os.path.join(SCRIPTDIR, "cv_proba.py")
    output:
        cv_proba_pkl = os.path.join(OUTDIR, "cv_proba_path.pkl"),
    threads: len(CHROM) if len(CHROM) <= 15 else 15
    shell:
        """%s/Software/miniconda3/envs/svmgwasappli3/bin/python {input.script} {threads} {input.libsvm} {input.rsid2chrom} {output.cv_proba_pkl}"""%HOME

rule rsid2chrom:
    input:
        instance = os.path.join(OUTDIR, "instance.txt"),
    output:
        rsid2chrom = os.path.join(OUTDIR, "rsid2chrom.tsv"),
    shell:
        """%s/data/2015_svmgwas/data/hcomp/get_record %s/data/2015_svmgwas/data/variant/1000genomes/eur/eur.peak.bed.idx %s/data/2015_svmgwas/data/variant/1000genomes/eur/eur.peak.bed -f {input.instance} |awk '{{print $4"\t"$1}}'>{output.rsid2chrom}"""%(HOME, HOME, HOME)

rule heatmap:
    input:
        pos_neg_index2annot_r2_label = os.path.join(OUTDIR, "index2annot_r2_label.tsv"),
        model_pkl = os.path.join(OUTDIR, "model.pkl"),
        script = os.path.join(SCRIPTDIR, "heatmap.py")
    output:
        heatmap_png = os.path.join(OUTDIR, "heatmap.png"),
    shell:
        """%s/Software/miniconda3/envs/svmgwasappli3/bin/python {input.script} {input.pos_neg_index2annot_r2_label} {input.model_pkl} {output.heatmap_png}"""%HOME


rule create_model:
    input:
        libsvm = os.path.join(OUTDIR, "annotation.libsvm"),
        variable = os.path.join(OUTDIR, "variable.txt"),
        script = os.path.join(SCRIPTDIR, "create_model.py")
    output:
        model_pkl = os.path.join(OUTDIR, "model.pkl"),
        feature_importance_tsv = os.path.join(OUTDIR, "feature_importance.tsv"),
        feature_importance_png = os.path.join(OUTDIR, "feature_importance.png"),
    shell:
        """%s/Software/miniconda3/envs/svmgwasappli3/bin/python {input.script} {input.libsvm} {input.variable} {output.model_pkl} {output.feature_importance_tsv}  {output.feature_importance_png}"""%HOME

rule to_libsvm:
    input:
        pos_neg_index2annot_r2_label = os.path.join(OUTDIR, "index2annot_r2_label.tsv"),
        script = os.path.join(SCRIPTDIR, "tsv2libsvm.R")
    output:
        libsvm = os.path.join(OUTDIR, "annotation.libsvm"),
        variable = os.path.join(OUTDIR, "variable.txt"),
        instance = os.path.join(OUTDIR, "instance.txt"),
    shell:
        """Rscript {input.script} {input.pos_neg_index2annot_r2_label} ."""

rule sort_unique:
    input:
        index2annot_r2_label_tsv = expand(os.path.join(OUTDIR, "{sign}/{sign}_index2annot_r2_label.tsv"), sign=SIGN)
    output:
        pos_neg_index2annot_r2_label = os.path.join(OUTDIR, "index2annot_r2_label.tsv")
    shell:
        """sort -u {input} >{output}"""

rule label_pos:
    input: 
        index2annot_r2_tsv = os.path.join(OUTDIR, "pos/pos_index2annot_r2.tsv")
    output:
        index2annot_r2_label_tsv = os.path.join(OUTDIR, "pos/pos_index2annot_r2_label.tsv")
    shell:
        """Rscript -e 'library(data.table); dt = fread("{input.index2annot_r2_tsv}", sep="\\t"); dt$label = 1; write.table(dt, file="{output.index2annot_r2_label_tsv}", sep="\\t", row.names=FALSE, col.names=FALSE, quote=FALSE)'"""

rule label_neg:
    input: 
        index2annot_r2_tsv = os.path.join(OUTDIR, "neg/neg_index2annot_r2.tsv")
    output:
        index2annot_r2_label_tsv = os.path.join(OUTDIR, "neg/neg_index2annot_r2_label.tsv")
    shell:
        """Rscript -e 'library(data.table); dt = fread("{input.index2annot_r2_tsv}", sep="\\t"); dt$label = -1; write.table(dt, file="{output.index2annot_r2_label_tsv}", sep="\\t", row.names=FALSE, col.names=FALSE, quote=FALSE)'"""

rule merge_neg:
    input: expand(os.path.join(OUTDIR, "{sign}/{chr}/index2annot_r2.tsv"), chr=CHROM, sign=['neg'])
    output:
        index2annot_r2_tsv = os.path.join(OUTDIR, "neg/neg_index2annot_r2.tsv")
    shell:
        """sort -u {input} >{output}"""

rule merge_pos:
    input: expand(os.path.join(OUTDIR, "{sign}/{chr}/index2annot_r2.tsv"), chr=CHROM, sign=['pos'])
    output:
        index2annot_r2_tsv = os.path.join(OUTDIR, "pos/pos_index2annot_r2.tsv")
    shell:
        """sort -u {input} >{output}"""

rule annotatecorr:
    input:
        index2tag2corr_r2_tsv = os.path.join(OUTDIR, "{sign}/{chr}/index2tag2corr_r2.tsv"),
        annotated_tsv = os.path.join(GENOME1K_DATA_DIR, "chr{chr}/intersect_%s/annotated.tsv"%ANNOTATION_BED_FN),
        script = os.path.join(SCRIPTDIR, "annotate_corr.R")
    output:
        index2annot_r2_tsv = os.path.join(OUTDIR, "{sign}/{chr}/index2annot_r2.tsv")
    shell: """Rscript {input.script} {input.index2tag2corr_r2_tsv} {input.annotated_tsv} {output.index2annot_r2_tsv}"""

rule index2tag2corr_pos:
    input:
        ld = os.path.join(GENOME1K_DATA_DIR, "chr{chr}/chr{chr}_ld.ld"),
        index_rsid = os.path.join(GENOME1K_DATA_DIR, "chr{chr}/chr{chr}_index.prune.in"),
        tag_rsid = TAG_RSID_POS,
        script = os.path.join(SCRIPTDIR, "index2tag2corr.R")
    output:
        index2tag2corr_r2_tsv = os.path.join(OUTDIR, "pos/{chr}/index2tag2corr_r2.tsv")
    shell: """Rscript {input.script} {input.ld} {input.index_rsid} {input.tag_rsid} {output.index2tag2corr_r2_tsv}"""

rule index2tag2corr_neg:
    input:
        ld = os.path.join(GENOME1K_DATA_DIR, "chr{chr}/chr{chr}_ld.ld"),
        index_rsid = os.path.join(GENOME1K_DATA_DIR, "chr{chr}/chr{chr}_index.prune.in"),
        tag_rsid = TAG_RSID_NEG,
        script = os.path.join(SCRIPTDIR, "index2tag2corr.R")
    output:
        index2tag2corr_r2_tsv = os.path.join(OUTDIR, "neg/{chr}/index2tag2corr_r2.tsv")
    shell: """Rscript {input.script} {input.ld} {input.index_rsid} {input.tag_rsid} {output.index2tag2corr_r2_tsv}"""

rule intersect_chrom:
    input:
        snp_bed = os.path.join(GENOME1K_DATA_DIR, "chr{chr}/chr{chr}.peak.bed"),
        annot_bed = os.path.join(HOME, "data/2015_svmgwas/data/annotation_ngs_based/%s/chrom/{chr}/%s_1col.bed"%(ANNOT_LABEL, ANNOT_LABEL)),
    output:
        annotated_tsv = os.path.join(GENOME1K_DATA_DIR, "chr{chr}/intersect_%s/annotated.tsv"%ANNOTATION_BED_FN)
    shell: """intersectBed -sorted -a {input.snp_bed} -b {input.annot_bed} -wb |awk '{{print $4"\t"$8}}' >{output.annotated_tsv}"""


